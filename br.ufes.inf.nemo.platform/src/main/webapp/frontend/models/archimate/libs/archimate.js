if (typeof exports === 'object') {

    var joint = {
        util: require('core/rappid-api/src/core').util,
        shapes: {
            basic: require('core/rappid-api/joint.shapes.basic')
        },
        dia: {
            ElementView: require('core/rappid-api/src/joint.dia.element').ElementView,
            Link: require('core/rappid-api/src/joint.dia.link').Link
        }
    };
    var _ = require('lodash');
}

joint.shapes.archimate = {}

//Generic View

joint.shapes.basic.GenericView = joint.dia.ElementView.extend({
	
    initialize: function() {

        joint.dia.ElementView.prototype.initialize.apply(this, arguments);

        this.listenTo(this.model, 'update', function() {
            this.update();
            this.resize();
        });
    }
});

/** BUSINESS LAYER */

//BusinessActor

joint.shapes.archimate.BusinessActor = joint.shapes.basic.Generic.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',	
			'</g>',
			'<g class="object" id="actor">',
			    '<circle id="head" cx="-6" cy="5" r="4" />',
			    '<path d="m -6.1,9.680806 0,7.854701" id="body"/>',
			    '<path d="m -1.887592,12.145657 -8.375184,0" id="arms"/>',
			    '<path d="m -1.391844,20.663667 -5.112996,-4.423328" id="rightleg"/>',
			    '<path d="m -10.603848,20.663667 5.112996,-4.423328" id="leftleg"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessActor',
		 subType: 'Business Actor',

	        attrs: {
	        	rect: {
	                width: 100,
	                height: 100
	            },
	            '.name-rect': { 
	            	'stroke': '#000000', 
	            	'stroke-width': 1, 
	            	'fill': '#FFFFB5' 
	            },
	            '.name-text': {
	                'ref': '.name-rect', 
	                'ref-y': .5, 
	                'ref-x': .5, 
	                'text-anchor': 'middle', 
	                'y-alignment': 'middle', 
	                'fill': '#000000', 	                
	                'font-weight': 'normal',
	                'font-size': 8,
	                'font-family': 'Arial'
	            },
	            '.object': {
	            	'ref': '.name-rect', 
	            	'ref-y': 1, 
	            	'ref-x': 0.999, 
	            	'text-anchor': 'end', 
	            	'fill':'none', 
	            	'stroke':'#000000', 
	            	'stroke-width': 1.2, 
	            	'stroke-opacity': 1
	            }
	            
	        },
	        
	        name: [],
		 
	 }, joint.shapes.basic.Generic.prototype.defaults),
	
	 initialize: function() {

	        this.on('change:name', function() {
	            this.updateRectangles();
	            this.trigger('update');
	        }, this);

	        this.updateRectangles();

		 	joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	    },

	    getClassName: function() {
	        return this.get('name');
	    },

	    updateRectangles: function() {

	        var attrs = this.get('attrs');

	        var rects = [
	            { type: 'name', text: this.getClassName() }
	        ];

	        var offsetY = 0;

	        _.each(rects, function(rect) {

	            var lines = _.isArray(rect.text) ? rect.text : [rect.text];
	            var rectHeight = lines.length * 20 + 20;

	            attrs['.' + rect.type + '-text'].text = lines.join('\n');
	            //attrs['.' + rect.type + '-rect'].height = rectHeight;
	            attrs['.' + rect.type + '-rect'].transform = 'translate(0,'+ offsetY + ')';

	            offsetY += rectHeight;
	        });
	    }

});
joint.shapes.archimate.BusinessActorView = joint.shapes.basic.GenericView; 

//BusinessRole

joint.shapes.archimate.BusinessRole = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="role">',
				'<circle id="c" cx="-6" cy="5" r="4" />',
				'<path d="M-16,9 L-4,9 M-16,1 L-4,1"/>',
				'<path d="M-16,9 Q-20,5 -16,1"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessRole',
		 subType: 'Business Role',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.BusinessRoleView = joint.shapes.basic.GenericView;

//Collaboration

joint.shapes.archimate.BusinessCollaboration = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
        	'<g class="object" id="collaboration">',
	            '<circle id="head" cx="-11.5" cy="5" r="4" />',
	            '<circle id="head" cx="-6" cy="5" r="4" />',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessCollaboration',
		 subType: 'Business Collaboration',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),
	
});
joint.shapes.archimate.BusinessCollaborationView = joint.shapes.basic.GenericView;

//Business Interface

joint.shapes.archimate.BusinessInterface = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="interface">',
	           	'<circle id="head" cx="-6" cy="5" r="4" />',
	           	'<path d="m -9.5,5 -9,0"/>',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessInterface',
		 subType: 'Business Interface',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.BusinessInterfaceView = joint.shapes.basic.GenericView;

//Location

joint.shapes.archimate.Location = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="location" >',
				'<path d="m -10,10 c -2.75491,-5.26182 -2.79148,-5.51717 -1.06356,-7.42651 2.23979,-2.47493 5.66039,-2.53989 7.82449,-0.14858 2.0977,2.31793 2.15054,1.94553 -1.12646,7.938 l -2.78145,5.08628 -2.85302,-5.44919 z m 6.65062,-6.40383 c -1.30567,-2.09146 -5.64472,-2.41581 -7.20282,-0.53842 -1.0823,1.3041 -0.9092,2.29357 1.04607,5.97928 l 2.34299,4.41658 2.37509,-4.17872 c 1.65929,-2.91934 2.09288,-4.63079 1.43867,-5.67872 z" id="head"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Location',
		 subType: 'Location',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.LocationView = joint.shapes.basic.GenericView;

//Business Process

joint.shapes.archimate.BusinessProcess = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="process" >',
            	'<path d="m -20,5 10,0 0,-4 6,6 -6,6 0,-4 -10,0z"/>',
            '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessProcess',
		 subType: 'Business Process',
		 
		 attrs: {
	        	rect: {
	            	rx: 2,
	                ry: 2,
	            },
		 }
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.BusinessProcessView = joint.shapes.basic.GenericView;

//Business Function

joint.shapes.archimate.BusinessFunction = joint.shapes.archimate.BusinessProcess.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="function">',
            	'<path d="m -10,2 6,6 0,8 -6,-6 -6,6 0,-8 z"/>',
            '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessFunction',
		 subType: 'Business Function',
		 
	 }, joint.shapes.archimate.BusinessProcess.prototype.defaults),

});
joint.shapes.archimate.BusinessFunctionView = joint.shapes.basic.GenericView;

//Business Interaction

joint.shapes.archimate.BusinessInteraction = joint.shapes.archimate.BusinessProcess.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="interaction">',
            	'<path d="m -10.288936,10.08533 c -2.546758,0 -4.61133,-2.064565 -4.61133,-4.611333 0,-2.546769 2.064572,-4.611334 4.61133,-4.611334 z"/>',
            	'<path d="m -7.669132, 0.862663 c 2.546758,0 4.61133,2.064565 4.61133,4.611333 0,2.546769 -2.064572,4.611334 -4.61133,4.611334 z"/>',
            '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessInteraction',
		 subType: 'Business Interaction',
		 
	 }, joint.shapes.archimate.BusinessProcess.prototype.defaults),

});
joint.shapes.archimate.BusinessInteractionView = joint.shapes.basic.GenericView;

//Business Event

joint.shapes.archimate.BusinessEvent = joint.shapes.archimate.BusinessProcess.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="event">',
            	'<path d="m -12,8 c 0.378808,-3.7881 -4.116349,-6.6214 -4.116349,-6.6214 l 7.204546,0.015 c 4.680969,0.017 7.171614,2.9626 7.241585,6.4242 0.06284,3.109 -2.195001,6.5605 -7.063014,6.5605 l -7.383117,0 c 0,0 4.190344,-2.1439 4.116349,-6.3783 z"/>',
            '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessEvent',
		 subType: 'Business Event',
		 
	 }, joint.shapes.archimate.BusinessProcess.prototype.defaults),

});
joint.shapes.archimate.BusinessEventView = joint.shapes.basic.GenericView;

//Business Service

joint.shapes.archimate.BusinessService = joint.shapes.archimate.BusinessProcess.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessService',
		 subType: 'Business Service',
		 
		 attrs: {
	        	rect: {
	            	rx: 30,
	                ry: 3000,
	            },
		 }
		 
	 }, joint.shapes.archimate.BusinessProcess.prototype.defaults),

});
joint.shapes.archimate.BusinessServiceView = joint.shapes.basic.GenericView;

//Business Object

joint.shapes.archimate.BusinessObject = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
	        	'<path fill="none" stroke="#000000" stroke-width="1" d="M0 15 L100 15"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.BusinessObject',
		 subType: 'Business Object',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.BusinessObjectView = joint.shapes.basic.GenericView;

//Representation

joint.shapes.archimate.Representation = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<polygon class="name-rect" fill="url(#background) #FEE0E2" id="bg_frame" stroke="#000000" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="0,60 0.000002578971816546982,59 0.0000025352605916850735,58 0.0000024915491394494893,57 0.000002447837687213905,56 0.0000024041264623519965,55 0.0000023604150101164123,54 0.000002316703557880828,53 0.000002272992105645244,52 0.0000022292808807833353,51 0.000002185569428547751,50 0.000002141857976312167,49 0.000002098146524076583,48 0.000002054435299214674,47 0.00000201072384697909,46 0.000001967012394743506,45 0.000001923301169881597,44 0.000001879589717646013,43 0.0000018358782654104289,42 0.0000017921669268616824,41 0.000001748455588312936,40 0.0000017047441360773519,39 0.0000016610327975286054,38 0.0000016173213452930213,37 0.0000015736100067442749,36 0.0000015298985545086907,35 0.0000014861872159599443,34 0.0000014424757637243601,33 0.0000013987644251756137,32 0.0000013550530866268673,31 0.0000013113416343912832,30 0.0000012676302958425367,29 0.0000012239188436069526,28 0.0000011802075050582062,27 0.000001136496052822622,26 0.0000010927847142738756,25 0.0000010490732620382914,24 0.000001005361923489545,23 9.616505849407986e-7,22 9.179391327052144e-7,21 8.74227794156468e-7,20 8.305163987643027e-7,19 7.868050033721374e-7,18 7.430936079799721e-7,17 6.993822125878069e-7,16 6.556708171956416e-7,15 6.119594218034763e-7,14 5.68248026411311e-7,13 5.245366310191457e-7,12 4.808252924703993e-7,11 4.37113897078234e-7,10 3.934025016860687e-7,9 3.4969110629390343e-7,8 3.0597971090173814e-7,7 2.6226831550957286e-7,6 2.18556948539117e-7,5 1.7484555314695172e-7,4 1.3113415775478643e-7,3 8.742277657347586e-8,2 4.371138828673793e-8,1 0,0 1,0 2,0 3,0 4,0 5,0 6,0 7,0 8,0 9,0 10,0 11,0 12,0 13,0 14,0 15,0 16,0 17,0 18,0 19,0 20,0 21,0 22,0 23,0 24,0 25,0 26,0 27,0 28,0 29,0 30,0 31,0 32,0 33,0 34,0 35,0 36,0 37,0 38,0 39,0 40,0 41,0 42,0 43,0 44,0 45,0 46,0 47,0 48,0 49,0 50,0 51,0 52,0 53,0 54,0 55,0 56,0 57,0 58,0 59,0 60,0 61,0 62,0 63,0 64,0 65,0 66,0 67,0 68,0 69,0 70,0 71,0 72,0 73,0 74,0 75,0 76,0 77,0 78,0 79,0 80,0 81,0 82,0 83,0 84,0 85,0 86,0 87,0 88,0 89,0 90,0 91,0 92,0 93,0 94,0 95,0 96,0 97,0 98,0 99,0 100,0 100,1.0000076293945312 100,2.0000076293945312 100,3.0000076293945312 100,4.000007629394531 100,5.000007629394531 100,6.000007629394531 100,7.000007629394531 100,8.000007629394531 100,9.000007629394531 100,10.000007629394531 100,11.000007629394531 100,12.000007629394531 100,13.000007629394531 100,14.000007629394531 100,15.000007629394531 100,16.00000762939453 100,17.00000762939453 100,18.00000762939453 100,19.00000762939453 100,20.00000762939453 100,21.00000762939453 100,22.00000762939453 100,23.00000762939453 100,24.00000762939453 100,25.00000762939453 100,26.00000762939453 100,27.00000762939453 100,28.00000762939453 100,29.00000762939453 100,30.00000762939453 100,31.00000762939453 100,32.00000762939453 100,33.00000762939453 100,34.00000762939453 100,35.00000762939453 100,36.00000762939453 100,37.00000762939453 100,38.00000762939453 100,39.00000762939453 100,40.00000762939453 100,41.00000762939453 100,42.00000762939453 100,43.00000762939453 100,44.00000762939453 100,45.00000762939453 100,46.00000762939453 100,47.00000762939453 100,48.00000762939453 100,49.00000762939453 100,50.00000762939453 100,51.00000762939453 100,52.00000762939453 100,53.00000762939453 100,54.00000762939453 100,55.00000762939453 100,56.00000762939453 100,57.00000762939453 100,58.00000762939453 100,59.00000762939453 100,60.00000762939453 99.8522720336914,60.596466064453125 99.18194580078125,59.85456466674805 98.48384857177734,59.1386604309082 97.7640151977539,58.44459915161133 97.02507019042969,57.77093505859375 96.26893615722656,57.1165771484375 95.49569702148438,56.48249816894531 94.70633697509766,55.86862564086914 93.90153503417969,55.275142669677734 93.08161926269531,54.702728271484375 92.2472152709961,54.151634216308594 91.39895629882812,53.62215805053711 90.53677368164062,53.11561584472656 89.66153717041016,52.632049560546875 88.77327728271484,52.172786712646484 87.87300872802734,51.737552642822266 86.9605484008789,51.32851791381836 86.03690338134766,50.94540786743164 85.10270690917969,50.58881378173828 84.15853881835938,50.2595329284668 83.20481872558594,49.9589958190918 82.24248504638672,49.68734359741211 81.27239227294922,49.44493865966797 80.29534149169922,49.23230743408203 79.31218719482422,49.049896240234375 78.3239517211914,48.897300720214844 77.33135986328125,48.776329040527344 76.33545684814453,48.686363220214844 75.33724975585938,48.627403259277344 74.33769989013672,48.59931564331055 73.3377456665039,48.60237121582031 72.3383560180664,48.63603973388672 71.34043884277344,48.69968795776367 70.34490966796875,48.793704986572266 69.35253143310547,48.91665267944336 68.36420440673828,49.06874084472656 67.380615234375,49.248870849609375 66.40240478515625,49.456241607666016 65.43023681640625,49.69046401977539 64.46476745605469,49.95075607299805 63.506370544433594,50.236087799072266 62.5555305480957,50.54566192626953 61.612640380859375,50.87863540649414 60.67799377441406,51.234169006347656 59.75190734863281,51.611366271972656 58.83456039428711,52.00942611694336 57.92637252807617,52.42788314819336 57.027198791503906,52.86545944213867 56.137149810791016,53.32122802734375 55.256492614746094,53.79496765136719 54.385135650634766,54.28557586669922 53.523040771484375,54.792232513427734 52.67035675048828,55.31465148925781 51.82685470581055,55.85173416137695 50.99257278442383,56.40303039550781 50.16754913330078,56.96808624267578 49.373313903808594,57.575286865234375 48.580780029296875,58.18506622314453 47.78174591064453,58.78631591796875 46.9760856628418,59.378692626953125 46.163490295410156,59.961483001708984 45.343727111816406,60.5341682434082 44.5169792175293,61.0966911315918 43.68315124511719,61.648658752441406 42.8421630859375,62.18967056274414 41.99396514892578,62.71928787231445 41.13850402832031,63.23714828491211 40.2748908996582,63.741275787353516 39.40383529663086,64.232421875 38.5247802734375,64.70909881591797 37.6380729675293,65.17138671875 36.74337387084961,65.61802673339844 35.840736389160156,66.04837036132812 34.93022537231445,66.46183013916016 34.0118408203125,66.85742950439453 33.0855827331543,67.23426055908203 32.151546478271484,67.59131622314453 31.209815979003906,67.92762756347656 30.260604858398438,68.24217224121094 29.30414581298828,68.53398132324219 28.340791702270508,68.80203247070312 27.37082290649414,69.04512786865234 26.394617080688477,69.26176452636719 25.412799835205078,69.45144653320312 24.425865173339844,69.61219024658203 23.434558868408203,69.743408203125 22.439664840698242,69.84381866455078 21.442041397094727,69.91219329833984 20.442712783813477,69.94732666015625 19.44277572631836,69.94818878173828 18.443424224853516,69.91387939453125 17.445945739746094,69.84364318847656 16.451745986938477,69.73681640625 15.462332725524902,69.59226989746094 14.479294776916504,69.40943908691406 13.503806114196777,69.1898193359375 12.538148880004883,68.93034362792969 11.583148002624512,68.63397216796875 10.641331672668457,68.2981948852539 9.71352481842041,67.92540740966797 8.801560401916504,67.51533508300781 7.907374382019043,67.06781768798828 7.032134056091309,66.58432006835938 6.177393913269043,66.0654296875 5.344698905944824,65.51187133789062 4.536118030548096,64.92363739013672 3.75290846824646,64.30203247070312 2.997610092163086,63.646793365478516 2.2727575302124023,62.958065032958984 1.5825567245483398,62.234622955322266 0.9342482686042786,61.473480224609375 0.3451862335205078,60.66588592529297"></polygon>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Representation',
		 subType: 'Representation',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.RepresentationView = joint.shapes.basic.GenericView;

//Meaning

joint.shapes.archimate.Meaning = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<polygon class="name-rect" fill="url(#background) #ffffb5" id="bg_frame" stroke="#000000" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="15.307171821594238,22.812528610229492 15.13711166381836,21.827167510986328 14.993922233581543,20.837509155273438 14.874820709228516,19.84465980529785 14.778078079223633,18.84938621520996 14.705989837646484,17.852025985717773 14.659110069274902,16.853178024291992 14.639873504638672,15.853433609008789 14.650444984436035,14.853549003601074 14.69637393951416,13.8546724319458 14.78173828125,12.858416557312012 14.912736892700195,11.867164611816406 15.097297668457031,10.884529113769531 15.345486640930176,9.916089057922363 15.669816017150879,8.970542907714844 16.08611297607422,8.061908721923828 16.611156463623047,7.2118072509765625 17.25888442993164,6.45152473449707 18.03230094909668,5.820130825042725 18.914297103881836,5.352543830871582 19.869951248168945,5.063146114349365 20.861492156982422,4.941839218139648 21.860549926757812,4.962953090667725 22.85096549987793,5.097723960876465 23.82504653930664,5.322629928588867 24.779993057250977,5.618759632110596 25.715621948242188,5.971344470977783 26.63262939453125,6.369959831237793 27.53225326538086,6.80645751953125 28.415790557861328,7.274694442749023 29.284473419189453,7.769967079162598 28.998628616333008,6.8851189613342285 28.733007431030273,5.921358108520508 28.560773849487305,4.936845779418945 28.51767349243164,3.9387924671173096 28.65329360961914,2.949967622756958 29.02199935913086,2.0238380432128906 29.63945770263672,1.242063045501709 30.451223373413086,0.6630609631538391 31.374176025390625,0.2825137674808502 32.348941802978516,0.06336396932601929 33.343841552734375,-0.03241204842925072 34.343505859375,-0.03205171227455139 35.340457916259766,0.042897894978523254 36.33071517944336,0.18100132048130035 37.31241989135742,0.3707541525363922 38.28401565551758,0.6069536209106445 39.244773864746094,0.8840125203132629 40.19395065307617,1.1984907388687134 41.1307373046875,1.548172950744629 42.054203033447266,1.9316797256469727 42.96296310424805,2.348834753036499 43.855735778808594,2.79917573928833 44.73057556152344,3.2834105491638184 45.58491897583008,3.802931785583496 46.41468048095703,4.3608269691467285 47.215152740478516,4.959943771362305 47.97856140136719,5.605518817901611 48.69434356689453,6.303408622741699 49.344207763671875,7.062861442565918 49.89970397949219,7.893396377563477 50.31352233886719,8.802023887634277 50.51262664794922,9.77896499633789 50.41963195800781,10.770228385925293 50.95009994506836,10.287959098815918 51.67710876464844,9.601730346679688 52.4488639831543,8.96609878540039 53.25410079956055,8.373373985290527 54.086708068847656,7.81967830657959 54.94120407104492,7.300376892089844 55.81401824951172,6.812465190887451 56.70246124267578,6.353601932525635 57.6044921875,5.922023773193359 58.518653869628906,5.516783237457275 59.443382263183594,5.136259078979492 60.377559661865234,4.7795844078063965 61.32052993774414,4.44679069519043 62.27144241333008,4.137444496154785 63.229454040527344,3.850856065750122 64.19435119628906,3.588343858718872 65.16524505615234,3.349003314971924 66.14179992675781,3.1338860988616943 67.12348175048828,2.9436147212982178 68.10971069335938,2.7784178256988525 69.10010528564453,2.640531539916992 70.09390258789062,2.529764175415039 71.0905532836914,2.4486610889434814 72.0892333984375,2.398507833480835 73.08900451660156,2.3807504177093506 74.0887680053711,2.3989367485046387 75.08710479736328,2.4549450874328613 76.08230590820312,2.5515389442443848 77.07223510742188,2.692235231399536 78.05410766601562,2.881103277206421 79.02439880371094,3.1224939823150635 79.97876739501953,3.420516014099121 80.91181945800781,3.7796669006347656 81.81694030761719,4.204245090484619 82.68608856201172,4.698205471038818 83.51039123535156,5.263745307922363 84.28036499023438,5.901226997375488 84.98622131347656,6.6089911460876465 85.61953735351562,7.382315158843994 86.17424774169922,8.213839530944824 86.64682006835938,9.094660758972168 87.03691864013672,10.015035629272461 87.34706115722656,10.965400695800781 87.58086395263672,11.937410354614258 88.31320190429688,12.179020881652832 89.30945587158203,12.093488693237305 90.30842590332031,12.050355911254883 91.3082504272461,12.057827949523926 92.30554962158203,12.12828540802002 93.29388427734375,12.278243064880371 94.26133728027344,12.528877258300781 95.18535614013672,12.908486366271973 96.02725982666016,13.444891929626465 96.73180389404297,14.151147842407227 97.2477798461914,15.004878997802734 97.55896759033203,15.953287124633789 97.689208984375,16.943588256835938 97.67601013183594,17.94283103942871 97.55264282226562,18.93475341796875 97.34634399414062,19.91297149658203 97.07445526123047,20.875120162963867 96.75047302246094,21.821062088012695 96.38410949707031,22.751434326171875 95.98238372802734,23.667131423950195 95.55010986328125,24.568803787231445 95.09214782714844,25.45770835876465 94.6111831665039,26.334396362304688 94.10966491699219,27.19950294494629 93.58821868896484,28.052751541137695 93.04877471923828,28.894733428955078 92.49029541015625,29.72422218322754 92.1692886352539,30.47976303100586 93.02580261230469,30.995258331298828 93.83570098876953,31.581274032592773 94.5969467163086,32.22927474975586 95.30770874023438,32.9323844909668 95.96759033203125,33.6834716796875 96.5782241821289,34.475120544433594 97.14139556884766,35.301246643066406 97.65907287597656,36.15668869018555 98.13299560546875,37.0371208190918 98.5662612915039,37.938262939453125 98.96068572998047,38.85710144042969 99.31800079345703,39.791011810302734 99.64065551757812,40.73744201660156 99.929443359375,41.69478988647461 100.18620300292969,42.66119384765625 100.41207885742188,43.63529968261719 100.60711669921875,44.61605453491211 100.77244567871094,45.60224151611328 100.90807342529297,46.59296417236328 101.01363372802734,47.58732986450195 101.08828735351562,48.584495544433594 101.13057708740234,49.58353805541992 101.13835144042969,50.58344650268555 101.10813903808594,51.582908630371094 101.03394317626953,52.58005142211914 100.90618896484375,53.571678161621094 100.7085189819336,54.55162048339844 100.40644836425781,55.5040168762207 99.9129867553711,56.36886978149414 99.91424560546875,57.212528228759766 100.23129272460938,58.16064453125 100.47282409667969,59.130733489990234 100.63460540771484,60.11723327636719 100.71347045898438,61.11380386352539 100.70944213867188,62.11347198486328 100.62273406982422,63.10940933227539 100.45677947998047,64.09525299072266 100.21537780761719,65.06541442871094 99.90362548828125,66.01532745361328 99.52703094482422,66.94149017333984 99.0912857055664,67.84134674072266 98.6015625,68.71305084228516 98.06336212158203,69.5556869506836 97.48125457763672,70.36866760253906 96.85930633544922,71.15158081054688 96.20140075683594,71.9045639038086 95.51082611083984,72.627685546875 94.7904052734375,73.32107543945312 94.04369354248047,73.98609161376953 93.27135467529297,74.62117767333984 92.47697448730469,75.22845458984375 91.6610336303711,75.80644226074219 90.82587432861328,76.35633087158203 89.97283935546875,76.87803649902344 89.10256958007812,77.37047576904297 88.21700286865234,77.83484649658203 87.31658935546875,78.26972961425781 86.40245819091797,78.67496490478516 85.475830078125,79.05078887939453 84.5368881225586,79.3946304321289 83.58710479736328,79.70729064941406 82.62715911865234,79.9871826171875 81.65776062011719,80.23235321044922 80.6802749633789,80.44303131103516 79.69525146484375,80.61489868164062 78.7043685913086,80.7489242553711 77.70872497558594,80.84111785888672 76.7099838256836,80.88946533203125 75.71007537841797,80.89136505126953 74.71133422851562,80.84379577636719 73.71647644042969,80.74385833740234 72.7287826538086,80.58844757080078 71.7521743774414,80.37421417236328 70.79132843017578,80.09786987304688 69.85133361816406,79.75732421875 68.93849182128906,79.34963989257812 68.05875396728516,78.87474060058594 67.21932220458984,78.33180236816406 66.42604064941406,77.72344207763672 65.4864730834961,77.77913665771484 64.50704956054688,77.98089599609375 63.52643585205078,78.17684936523438 62.54483413696289,78.36772155761719 61.56242752075195,78.5544204711914 60.5789909362793,78.73567962646484 59.59468078613281,78.91201782226562 58.60990524291992,79.08587646484375 57.624046325683594,79.25337982177734 56.63739776611328,79.4162368774414 55.64997482299805,79.57430267333984 54.66176223754883,79.7274398803711 53.672794342041016,79.87545776367188 52.68303680419922,80.01819610595703 51.692508697509766,80.15543365478516 50.70119857788086,80.28692626953125 49.709110260009766,80.41242980957031 48.71625518798828,80.53165435791016 47.722625732421875,80.64424896240234 46.72822189331055,80.7498550415039 45.73301696777344,80.84768676757812 44.737037658691406,80.93724060058594 43.7403450012207,81.01824951171875 42.74294662475586,81.0900650024414 41.74491882324219,81.15280151367188 40.74625015258789,81.20413208007812 39.747047424316406,81.24369049072266 38.74742126464844,81.27031707763672 37.74750900268555,81.2826156616211 36.747528076171875,81.27897644042969 35.747802734375,81.25740051269531 34.74869918823242,81.21558380126953 33.750858306884766,81.15068054199219 32.75510025024414,81.05925750732422 31.762815475463867,80.93595123291016 30.775882720947266,80.77535247802734 29.79765510559082,80.56848907470703 28.833240509033203,80.3048324584961 27.891908645629883,79.96831512451172 26.99016571044922,79.53754425048828 26.158710479736328,78.98421478271484 25.45291519165039,78.27904510498047 24.954748153686523,77.41597747802734 24.727689743041992,76.44568634033203 24.759441375732422,75.44843292236328 24.98737335205078,74.47604370117188 25.349979400634766,73.54476928710938 25.805681228637695,72.65505981445312 25.277013778686523,72.61996459960938 24.320220947265625,72.91063690185547 23.357318878173828,73.18034362792969 22.388364791870117,73.42735290527344 21.413450241088867,73.64979553222656 20.432859420776367,73.84553527832031 19.44666862487793,74.0107650756836 18.455720901489258,74.14453125 17.46062469482422,74.24238586425781 16.46248435974121,74.3021240234375 15.462717056274414,74.31800842285156 14.463360786437988,74.28739929199219 13.46688461303711,74.20557403564453 12.476489067077637,74.06856536865234 11.496527671813965,73.87024688720703 10.531901359558105,73.60749816894531 9.588591575622559,73.27629852294922 8.67318058013916,72.8744125366211 7.7927422523498535,72.4008560180664 6.954296588897705,71.8564224243164 6.1639885902404785,71.2442398071289 5.4271345138549805,70.568603515625 4.747636318206787,69.8353500366211 4.126351356506348,69.05216217041016 3.5645713806152344,68.22514343261719 3.0610334873199463,67.36145782470703 2.612900972366333,66.46768951416016 2.218838930130005,65.54878234863281 1.8743274211883545,64.61016845703125 1.5774275064468384,63.655364990234375 1.323740005493164,62.68819808959961 1.111163854598999,61.71113586425781 0.9364962577819824,60.72657012939453 0.7968429327011108,59.73643493652344 0.689896285533905,58.74222183227539 0.6135368943214417,57.745208740234375 0.565922200679779,56.74636459350586 0.5452337861061096,55.746612548828125 0.5497602820396423,54.746681213378906 0.5780965685844421,53.747093200683594 0.6289803385734558,52.74843215942383 0.7013013958930969,51.751041412353516 0.7942067384719849,50.755401611328125 0.9068657159805298,49.76177978515625 1.0387150049209595,48.77056121826172 1.1876634359359741,47.78173828125 1.3546197414398193,46.79582977294922 1.538533091545105,45.812923431396484 1.7385895252227783,44.833160400390625 1.9557263851165771,43.85702896118164 2.1875386238098145,42.88429260253906 2.436720848083496,41.915863037109375 2.699974775314331,40.95117950439453 2.9801840782165527,39.99126434326172 3.274736166000366,39.03566360473633 3.585958957672119,38.085357666015625 3.9120025634765625,37.13999557495117 4.255133152008057,36.20077133178711 4.613452911376953,35.26716995239258 4.990201473236084,34.34088897705078 5.383277893066406,33.42144775390625 5.795322895050049,32.51029586791992 6.226711273193359,31.608205795288086 6.677913665771484,30.715852737426758 7.151182651519775,29.83497428894043 7.648740291595459,28.967578887939453 8.172304153442383,28.11566162109375 8.725042343139648,27.282394409179688 9.310859680175781,26.4720516204834 9.934528350830078,25.69053840637207 10.60250186920166,24.9466609954834 11.323467254638672,24.25414276123047 12.10818862915039,23.63530158996582 12.9686918258667,23.12805938720703 13.910260200500488,22.798219680786133 14.904253005981445,22.739727020263672"></polygon>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Meaning',
		 subType: 'Meaning',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.MeaningView = joint.shapes.basic.GenericView;

//Value

joint.shapes.archimate.Value = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<ellipse class="name-rect" cx="55" cy="30" rx="55" ry="30" fill="url(#background) #ffffb5" id="bg_frame" stroke="#000000" stroke-width="1"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Value',
		 subType: 'Value',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.ValueView = joint.shapes.basic.GenericView;

//Product

joint.shapes.archimate.Product = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
        		'<path fill="none" stroke="#000000" stroke-width="1" d="M 0 15 50 15 50 0"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Product',
		 subType: 'Product',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.ProductView = joint.shapes.basic.GenericView;

//Contract

joint.shapes.archimate.Contract = joint.shapes.archimate.BusinessActor.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
	        	'<path fill="none" stroke="#000000" stroke-width="1" d="M0 15 L100 15"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Contract',
		 subType: 'Contract',
		 
	 }, joint.shapes.archimate.BusinessActor.prototype.defaults),

});
joint.shapes.archimate.ContractView = joint.shapes.basic.GenericView;

/** APPLICATION LAYER */

//Application Component

joint.shapes.archimate.ApplicationComponent = joint.shapes.basic.Generic.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',	        		
			'</g>',
			'<path fill="#b5ffff" stroke="#000000" stroke-width="1" d="M -5 10 10 10 10 20 -5 20 z"/>',
			'<path fill="#b5ffff" stroke="#000000" stroke-width="1" d="M -5 30 10 30 10 40 -5 40 z"/>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.ApplicationComponent',
		 subType: 'Application Component',

	        attrs: {
	        	rect: {
	                width: 100,
	                height: 100
	            },
	            '.name-rect': { 
	            	'stroke': '#000000', 
	            	'stroke-width': 1, 
	            	'fill': '#b5ffff' 
	            },
	            '.name-text': {
	                'ref': '.name-rect', 
	                'ref-y': .5, 
	                'ref-x': .5, 
	                'text-anchor': 'middle', 
	                'y-alignment': 'middle', 
	                'fill': '#000000', 
	                'font-weight': 'normal',
	                'font-size': 12, 
	                'font-family': 'Arial'
	            },
	            '.object': {
	            	'ref': '.name-rect', 
	            	'ref-y': 1, 
	            	'ref-x': 0.999, 
	            	'text-anchor': 'end',
	            	'fill':'none', 
	            	'stroke':'#000000', 
	            	'stroke-width': 1.2, 
	            	'stroke-opacity': 1
	            }
	            
	        },
	        
	        name: [],
		 
	 }, joint.shapes.basic.Generic.prototype.defaults),
	
	 initialize: function() {

	        this.on('change:name', function() {
	            this.updateRectangles();
	            this.trigger('update');
	        }, this);

	        this.updateRectangles();

		 	joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	    },

	    getClassName: function() {
	        return this.get('name');
	    },

	    updateRectangles: function() {

	        var attrs = this.get('attrs');

	        var rects = [
	            { type: 'name', text: this.getClassName() }
	        ];

	        var offsetY = 0;

	        _.each(rects, function(rect) {

	            var lines = _.isArray(rect.text) ? rect.text : [rect.text];
	            var rectHeight = lines.length * 20 + 20;

	            attrs['.' + rect.type + '-text'].text = lines.join('\n');
	            attrs['.' + rect.type + '-rect'].transform = 'translate(0,'+ offsetY + ')';

	            offsetY += rectHeight;
	        });
	    }

});
joint.shapes.archimate.ApplicationComponentView = joint.shapes.basic.GenericView;

//Application Collaboration

joint.shapes.archimate.ApplicationCollaboration = joint.shapes.archimate.ApplicationComponent.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
        	'<g class="object" id="a-collaboration">',
	            '<circle id="head" cx="-11.5" cy="5" r="4" />',
	            '<circle id="head" cx="-6" cy="5" r="4" />',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.ApplicationCollaboration',
		 subType: 'Application Collaboration',
		 
	 }, joint.shapes.archimate.ApplicationComponent.prototype.defaults),
	
});
joint.shapes.archimate.ApplicationCollaborationView = joint.shapes.basic.GenericView;

//Application Interface

joint.shapes.archimate.ApplicationInterface = joint.shapes.archimate.ApplicationComponent.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="a-interface">',
	           	'<circle id="head" cx="-6" cy="5" r="4" />',
	           	'<path d="m -9.5,5 -9,0"/>',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.ApplicationInterface',
		 subType: 'Application Interface',
		 
	 }, joint.shapes.archimate.ApplicationComponent.prototype.defaults),

});
joint.shapes.archimate.ApplicationInterfaceView = joint.shapes.basic.GenericView;

//Application Function

joint.shapes.archimate.ApplicationFunction = joint.shapes.archimate.ApplicationComponent.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="a-function">',
            	'<path d="m -10,2 6,6 0,8 -6,-6 -6,6 0,-8 z"/>',
            '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.ApplicationFunction',
		 subType: 'Application Function',
		 
		 attrs: {
	        	rect: {
	            	rx: 2,
	                ry: 2,
	            },
		 }
		 
	 }, joint.shapes.archimate.ApplicationComponent.prototype.defaults),

});
joint.shapes.archimate.ApplicationFunctionView = joint.shapes.basic.GenericView;

//Application Interaction

joint.shapes.archimate.ApplicationInteraction = joint.shapes.archimate.ApplicationFunction.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="a-interaction">',
            	'<path d="m -10.288936,10.08533 c -2.546758,0 -4.61133,-2.064565 -4.61133,-4.611333 0,-2.546769 2.064572,-4.611334 4.61133,-4.611334 z"/>',
            	'<path d="m -7.669132, 0.862663 c 2.546758,0 4.61133,2.064565 4.61133,4.611333 0,2.546769 -2.064572,4.611334 -4.61133,4.611334 z"/>',
            '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.ApplicationInteraction',
		 subType: 'Application Interaction',
		 
	 }, joint.shapes.archimate.ApplicationFunction.prototype.defaults),

});
joint.shapes.archimate.ApplicationInteractionView = joint.shapes.basic.GenericView;

//Application Service

joint.shapes.archimate.ApplicationService = joint.shapes.archimate.ApplicationFunction.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.ApplicationService',
		 subType: 'Application Service',
		 
		 attrs: {
	        	rect: {
	            	rx: 30,
	                ry: 3000,
	            },
		 }
		 
	 }, joint.shapes.archimate.ApplicationFunction.prototype.defaults),

});
joint.shapes.archimate.ApplicationServiceView = joint.shapes.basic.GenericView;

//Data Object

joint.shapes.archimate.DataObject = joint.shapes.archimate.ApplicationComponent.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
	        	'<path fill="none" stroke="#000000" stroke-width="1" d="M0 15 L100 15"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.DataObject',
		 subType: 'Data Object',
		 
	 }, joint.shapes.archimate.ApplicationComponent.prototype.defaults),

});
joint.shapes.archimate.DataObjectView = joint.shapes.basic.GenericView;

/** TECHNOLOGY LAYER */

//Node

joint.shapes.archimate.Node = joint.shapes.basic.Generic.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',	        		
			'</g>',
			'<g class="object" id="node" stroke-linejoin="round">',
	            '<path d="m -17.059004,5.27182 9.786771,0 3.591141,-3.5911406 -9.786771,0 z"/>',
	            '<path d="m -6.845775,5.27182 0,9.901718 3.591141,-3.591141 0,-9.9017176 z"/>',
	            '<path d="m -17.059004,5.27182 9.786771,0 0,9.901718 -9.786771,0 z"/>',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Node',
		 subType: 'Node',

	        attrs: {
	        	rect: {
	                width: 100,
	                height: 100
	            },
	            '.name-rect': { 
	            	'stroke': '#000000', 
	            	'stroke-width': 1, 
	            	'fill': '#c9e7b7' 
	            },
	            '.name-text': {
	                'ref': '.name-rect', 
	                'ref-y': .5, 
	                'ref-x': .5, 
	                'text-anchor': 
	                'middle', 
	                'y-alignment': 'middle', 
	                'fill': '#000000', 
	                'font-weight': 'normal',
	                'font-size': 12, 
	                'font-family': 'Arial'
	            },
	            '.object': {
	            	'ref': '.name-rect', 
	            	'ref-y': 1, 
	            	'ref-x': 0.999, 
	            	'text-anchor': 'end',
	            	'fill':'none', 
	            	'stroke':'#000000', 
	            	'stroke-width': 1.2, 
	            	'stroke-opacity': 1
	            }
	            
	        },
	        
	        name: [],
		 
	 }, joint.shapes.basic.Generic.prototype.defaults),
	
	 initialize: function() {

	        this.on('change:name', function() {
	            this.updateRectangles();
	            this.trigger('update');
	        }, this);

	        this.updateRectangles();

		 	joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	    },

	    getClassName: function() {
	        return this.get('name');
	    },

	    updateRectangles: function() {

	        var attrs = this.get('attrs');

	        var rects = [
	            { type: 'name', text: this.getClassName() }
	        ];

	        var offsetY = 0;

	        _.each(rects, function(rect) {

	            var lines = _.isArray(rect.text) ? rect.text : [rect.text];
	            var rectHeight = lines.length * 20 + 20;

	            attrs['.' + rect.type + '-text'].text = lines.join('\n');
	            attrs['.' + rect.type + '-rect'].transform = 'translate(0,'+ offsetY + ')';

	            offsetY += rectHeight;
	        });
	    }

});
joint.shapes.archimate.NodeView = joint.shapes.basic.GenericView;

//Device

joint.shapes.archimate.Device = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
	        	'<g id="border" style="stroke:#000000;stroke-width:1.2;stroke-opacity:1">',
		            '<path id="topborder" class="box_border_top" d="M0,0 L10,-10 L110,-10 L100,0z" fill="#E7FFE7" />',
		            '<path id="rightborder" class="box_border_right" d="M100,0 L110,-10 L110,90 L100,100 z" fill="#E7FFE7" />',
		        '</g>',
			'</g>',
			'<text class="name-text"/>',
			'<g class="object" id="device" >',
	        	'<path d="M -16.84375,2.4375 C -16.2909373,2.4375 -17.875,2.9094091 -17.875,3.5 l 0,8.5 c 0,0.590591 0.4159373,1.0625 0.96875,1.0625 l 0.59375,0 -1.625,2.21875 14.46875,0 -1.25,-2.21875 0.4375,0 c 0.552813,0 1,-0.471909 1,-1.0625 l 0,-8.5 c 0,-0.5905909 -0.447187,-1.0625 -1,-1.0625 l -12.625,0 z" style="fill:none;stroke:#000000;stroke-width:1.5;stroke-miterlimit:4;stroke-opacity:1"/>',
	        	'<path d="m -15.6224593,12.702496 11.6492177,0 -0.02612,0" id="path4407" style="fill:none;stroke:#000000;stroke-width:0.75;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1" />',
	        '</g>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Device',
		 subType: 'Device',
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.DeviceView = joint.shapes.basic.GenericView;

//Network

joint.shapes.archimate.Network = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
			'<text class="name-text"/>',
			'<g class="object" id="network">',
		        '<circle id="cul" cx="-15" cy="4" r="2" fill="#000000" stroke="none" />',
		        '<circle id="cur" cx="-5" cy="4" r="2" fill="#000000" stroke="none" />',
		        '<circle id="clr" cx="-8" cy="14" r="2" fill="#000000" stroke="none" />',
		        '<circle id="cll" cx="-18" cy="14" r="2" fill="#000000" stroke="none" />',
		        '<path d="M-15 4 L-5 4 L-8 14 L-18 14 Z" />',
		    '</g>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Network',
		 subType: 'Network',
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.NetworkView = joint.shapes.basic.GenericView;

//Communication Path

joint.shapes.archimate.CommunicationPath = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
			'<text class="name-text"/>',
			'<g class="object" id="comm-path">',
		        '<path id="commpath"  d="M-20 7 L-5 7" stroke="#000000" fill="none" stroke-width="2" stroke-dasharray="2, 2"/>',
		        '<path d="m -19,3 -4,4 4,4 0,0" />',
		        '<path d="m -6.904661,11.049788 4,-4 -4,-3.9999999 0,0" />',
		    '</g>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.CommunicationPath',
		 subType: 'Communication Path',
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.CommunicationPathView = joint.shapes.basic.GenericView;

//Infrastructure Interface

joint.shapes.archimate.InfrastructureInterface = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="i-interface" transform="translate(0,-4)">',
	           	'<circle id="head" cx="-6" cy="5" r="4" />',
	           	'<path d="m -9.5,5 -9,0"/>',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.InfrastructureInterface',
		 subType: 'Infrastructure Interface',
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.InfrastructureInterfaceView = joint.shapes.basic.GenericView;

//System Software

joint.shapes.archimate.SystemSoftware = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="software">',
	            '<circle id="cback" cx="-7" cy="6.5" r="5" />',
	            '<circle id="icon_el" style="fill:#c9e7b7" cx="-9.5" cy="8" r="6" />',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.SystemSoftware',
		 subType: 'System Software',
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.SystemSoftwareView = joint.shapes.basic.GenericView;

//Infrastructure Function

joint.shapes.archimate.InfrastructureFunction = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<g class="object" id="i-function">',
            	'<path d="m -10,2 6,6 0,8 -6,-6 -6,6 0,-8 z"/>',
            '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.InfrastructureFunction',
		 subType: 'Infrastructure Function',
		 
		 attrs: {
	        	rect: {
	            	rx: 2,
	                ry: 2,
	            },
		 }
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.InfrastructureFunctionView = joint.shapes.basic.GenericView;

//Infrastructure Service

joint.shapes.archimate.InfrastructureService = joint.shapes.archimate.InfrastructureFunction.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<rect class="name-rect"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.InfrastructureService',
		 subType: 'Infrastructure Service',
		 
		 attrs: {
	        	rect: {
	            	rx: 30,
	                ry: 3000,
	            },
		 }
		 
	 }, joint.shapes.archimate.InfrastructureFunction.prototype.defaults),

});
joint.shapes.archimate.InfrastructureServiceView = joint.shapes.basic.GenericView;

//Artifact

joint.shapes.archimate.Artifact = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<path class="name-rect" d="M 0,0 70,0 100,30 100,100 0,100 z" />',
        		'<path style="fill:none;stroke:#000000;stroke-width:1" d="M 70,0 70,30 100,30" />', 
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Artifact',
		 subType: 'Artifact',
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.ArtifactView = joint.shapes.basic.GenericView;

/** MOTIVATIONAL LAYER*/

//Stakeholder

joint.shapes.archimate.Stakeholder = joint.shapes.basic.Generic.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<path class="name-rect" d="M0,10 L10,0 L90,0 L100,10 L100,70 L90,80 L10,80 L0,70 L0,10 Z"/>',	        		
			'</g>',
			'<g class="object" id="stakeholder">',
				'<circle id="c" cx="-10" cy="5" r="4" />',
				'<path d="M-20,9 L-8,9 M-20,1 L-8,1"/>',
				'<path d="M-20,9 Q-24,5 -20,1"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Stakeholder',
		 subType: 'Stakeholder',

	        attrs: {
	        	rect: {
	                width: 100,
	                height: 100
	            },
	            '.name-rect': { 
	            	'stroke': '#000000', 
	            	'stroke-width': 1, 
	            	'fill': '#FFCBFF' },
	            '.name-text': {
	                'ref': '.name-rect', 
	                'ref-y': .5, 
	                'ref-x': .5, 
	                'text-anchor': 'middle', 
	                'y-alignment': 'middle', 
	                'font-weight': 'normal',
	                'fill': '#000000', 
	                'font-size': 12, 
	                'font-family': 'Arial'
	            },
	            '.object': {
	            	'ref': '.name-rect', 
	            	'ref-y': 1, 
	            	'ref-x': .9, 
	            	'text-anchor': 'end',
	            	'fill':'none', 
	            	'stroke':'#000000', 
	            	'stroke-width': 1.2, 
	            	'stroke-opacity': 1
	            }
	            
	        },
	        
	        name: [],
		 
	 }, joint.shapes.basic.Generic.prototype.defaults),
	
	 initialize: function() {

	        this.on('change:name', function() {
	            this.updateRectangles();
	            this.trigger('update');
	        }, this);

	        this.updateRectangles();

		 	joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	    },

	    getClassName: function() {
	        return this.get('name');
	    },

	    updateRectangles: function() {

	        var attrs = this.get('attrs');

	        var rects = [
	            { type: 'name', text: this.getClassName() }
	        ];

	        var offsetY = 0;

	        _.each(rects, function(rect) {

	            var lines = _.isArray(rect.text) ? rect.text : [rect.text];
	            var rectHeight = lines.length * 20 + 20;

	            attrs['.' + rect.type + '-text'].text = lines.join('\n');
	            attrs['.' + rect.type + '-rect'].transform = 'translate(0,'+ offsetY + ')';

	            offsetY += rectHeight;
	        });
	    }

});
joint.shapes.archimate.StakeholderView = joint.shapes.basic.GenericView;

//Driver

joint.shapes.archimate.Driver = joint.shapes.archimate.Stakeholder.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<path class="name-rect" d="M0,10 L10,0 L90,0 L100,10 L100,70 L90,80 L10,80 L0,70 L0,10 Z"/>',	     
			'</g>',
			'<text class="name-text"/>',
			'<g class="object" id="driver">',
		        '<path d="M-0.682,8V7h-1.023c-0.106-1-0.666-2.717-1.537-3.737l0.719-0.72l-0.708-0.708l-0.718,0.716 C-4.967,1.672-6.26,1.107-7.682,0.999V0h-1v0.999c-1.422,0.108-2.714,0.673-3.732,1.551l-0.718-0.717l-0.707,0.708l0.718,0.722 C-13.992,4.283-14.551,6-14.656,7h-1.025v1h1.025c0.109,1,0.67,2.702,1.543,3.72l-0.727,0.724l0.707,0.705l0.727-0.726 c1.018,0.873,2.308,1.433,3.725,1.542V15h1v-1.035c1.417-0.108,2.707-0.67,3.725-1.543l0.727,0.726l0.707-0.707l-0.727-0.722 C-2.377,10.701-1.818,9-1.707,8H-0.682z M-2.705,7h-4.269l3.024-3.024C-3.257,4.811-2.808,6-2.705,7z M-4.656,3.258l-3.025,3.026V2 C-6.535,2.104-5.49,2.558-4.656,3.258z M-8.682,2v4.283l-3.025-3.026C-10.873,2.558-9.828,2.104-8.682,2z M-12.414,3.975L-9.389,7 h-4.268C-13.556,6-13.106,4.811-12.414,3.975z M-13.656,8h4.268l-3.018,3.017C-13.1,10.184-13.552,9-13.656,8z M-11.699,11.714 l3.018-3.017v4.266C-9.824,12.859-10.865,12.409-11.699,11.714z M-7.682,12.963V8.697l3.018,3.017 C-5.498,12.408-6.539,12.859-7.682,12.963z M-3.957,11.017L-6.975,8h4.268C-2.812,9-3.264,10.184-3.957,11.017z" />',
		    '</g>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Driver',
		 subType: 'Driver',
		 
	 }, joint.shapes.archimate.Stakeholder.prototype.defaults),

});
joint.shapes.archimate.DriverView = joint.shapes.basic.GenericView;

//Assessment

joint.shapes.archimate.Assessment = joint.shapes.archimate.Stakeholder.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<path class="name-rect" d="M0,10 L10,0 L90,0 L100,10 L100,70 L90,80 L10,80 L0,70 L0,10 Z"/>',	     
			'</g>',
			'<g class="object" id="assessment">',
				'<circle id="head" cx="-5" cy="5" r="4"/>',
				'<path d="m-8,8 -7,7"/>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Assessment',
		 subType: 'Assessment',
		 
	 }, joint.shapes.archimate.Stakeholder.prototype.defaults),

});
joint.shapes.archimate.AssessmentView = joint.shapes.basic.GenericView;

//Goal

joint.shapes.archimate.Goal = joint.shapes.basic.Generic.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<path class="name-rect" d="M0,10 L10,0 L90,0 L100,10 L100,70 L90,80 L10,80 L0,70 L0,10 Z"/>',	        		
			'</g>',
	        '<g class="object" id="goal" >',
	            '<circle id="c_inner" cx="-6" cy="8" r="2" fill="#000000" stroke="none" />',
	            '<circle id="c_middle" cx="-6" cy="8" r="4" />',
	            '<circle id="c_middle" cx="-6" cy="8" r="7" />',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Goal',
		 subType: 'Goal',

	        attrs: {
	        	rect: {
	                width: 100,
	                height: 100
	            },
	            '.name-rect': { 
	            	'stroke': '#000000', 
	            	'stroke-width': 1, 
	            	'fill': '#cacefd' },
	            '.name-text': {
	                'ref': '.name-rect', 
	                'ref-y': .5, 
	                'ref-x': .5, 
	                'text-anchor': 'middle', 
	                'y-alignment': 'middle', 
	                'font-weight': 'normal',
	                'fill': '#000000', 
	                'font-size': 12, 
	                'font-family': 'Arial'
	            },
	            '.object': {
	            	'ref': '.name-rect', 
	            	'ref-y': 1, 
	            	'ref-x': .9, 
	            	'text-anchor': 'end',
	            	'fill':'none', 
	            	'stroke':'#000000', 
	            	'stroke-width': 1.2, 
	            	'stroke-opacity': 1
	            }
	            
	        },
	        
	        name: [],
		 
	 }, joint.shapes.basic.Generic.prototype.defaults),
	
	 initialize: function() {

	        this.on('change:name', function() {
	            this.updateRectangles();
	            this.trigger('update');
	        }, this);

	        this.updateRectangles();

		 	joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	    },

	    getClassName: function() {
	        return this.get('name');
	    },

	    updateRectangles: function() {

	        var attrs = this.get('attrs');

	        var rects = [
	            { type: 'name', text: this.getClassName() }
	        ];

	        var offsetY = 0;

	        _.each(rects, function(rect) {

	            var lines = _.isArray(rect.text) ? rect.text : [rect.text];
	            var rectHeight = lines.length * 20 + 20;

	            attrs['.' + rect.type + '-text'].text = lines.join('\n');
	            attrs['.' + rect.type + '-rect'].transform = 'translate(0,'+ offsetY + ')';

	            offsetY += rectHeight;
	        });
	    }

});
joint.shapes.archimate.GoalView = joint.shapes.basic.GenericView;

//Requirement

joint.shapes.archimate.Requirement = joint.shapes.archimate.Goal.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<path class="name-rect" d="M0,10 L10,0 L90,0 L100,10 L100,70 L90,80 L10,80 L0,70 L0,10 Z"/>',	     
			'</g>',
			'<g class="object" id="requirement">',
	            '<path d="M -15,2 -2,2 -5,8 -18,8 z" />',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Requirement',
		 subType: 'Requirement',
		 
	 }, joint.shapes.archimate.Goal.prototype.defaults),

});
joint.shapes.archimate.RequirementView = joint.shapes.basic.GenericView;

//Constraint

joint.shapes.archimate.Constraint = joint.shapes.archimate.Goal.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<path class="name-rect" d="M0,10 L10,0 L90,0 L100,10 L100,70 L90,80 L10,80 L0,70 L0,10 Z"/>',	     
			'</g>',
			'<g class="object" id="constraint">',
	            '<path d="M -15,2 -2,2 -5,8 -18,8 z M -10,2 -13,8" />',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Constraint',
		 subType: 'Constraint',
		 
	 }, joint.shapes.archimate.Goal.prototype.defaults),

});
joint.shapes.archimate.ConstraintView = joint.shapes.basic.GenericView;

//Principle

joint.shapes.archimate.Principle = joint.shapes.archimate.Goal.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
        		'<path class="name-rect" d="M0,10 L10,0 L90,0 L100,10 L100,70 L90,80 L10,80 L0,70 L0,10 Z"/>',	     
			'</g>',
			 '<g class="object" id="principle">',
	            '<path d="M -15,2 -3,2 -3,14 -15,14 z"/>',
	            '<path d="M -10,4 -8.5,7 -8.5,7 -7,4 z" style="fill:#000000;"/>',
	            '<circle cx="-8.5" cy="11" r="1" style="fill:#000000;"/>',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Principle',
		 subType: 'Principle',
		 
	 }, joint.shapes.archimate.Goal.prototype.defaults),

});
joint.shapes.archimate.PrincipleView = joint.shapes.basic.GenericView;

/** IMPLEMENTATION AND MIGRATION LAYER*/

//Work Package

joint.shapes.archimate.WorkPackage = joint.shapes.basic.Generic.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',	        		
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.WorkPackage',
		 subType: 'Work Package',

	        attrs: {
	        	rect: {
	        		rx: 2,
	        		ry: 2,
	                width: 100,
	                height: 100
	            },
	            '.name-rect': { 
	            	'stroke': '#000000', 
	            	'stroke-width': 1, 
	            	'fill': '#fddfe3' },
	            '.name-text': {
	                'ref': '.name-rect', 
	                'ref-y': .5, 
	                'ref-x': .5, 
	                'text-anchor': 'middle', 
	                'y-alignment': 'middle', 
	                'font-weight': 'normal',
	                'fill': '#000000', 
	                'font-size': 12, 
	                'font-family': 'Arial'
	            },
	            '.object': {
	            	'ref': '.name-rect', 
	            	'ref-y': 1, 
	            	'ref-x': 0.999, 
	            	'text-anchor': 'end',
	            	'fill':'none', 
	            	'stroke':'#000000', 
	            	'stroke-width': 1.2, 
	            	'stroke-opacity': 1
	            }
	            
	        },
	        
	        name: [],
		 
	 }, joint.shapes.basic.Generic.prototype.defaults),
	
	 initialize: function() {

	        this.on('change:name', function() {
	            this.updateRectangles();
	            this.trigger('update');
	        }, this);

	        this.updateRectangles();

		 	joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	    },

	    getClassName: function() {
	        return this.get('name');
	    },

	    updateRectangles: function() {

	        var attrs = this.get('attrs');

	        var rects = [
	            { type: 'name', text: this.getClassName() }
	        ];

	        var offsetY = 0;

	        _.each(rects, function(rect) {

	            var lines = _.isArray(rect.text) ? rect.text : [rect.text];
	            var rectHeight = lines.length * 20 + 20;

	            attrs['.' + rect.type + '-text'].text = lines.join('\n');
	            attrs['.' + rect.type + '-rect'].transform = 'translate(0,'+ offsetY + ')';

	            offsetY += rectHeight;
	        });
	    }

});
joint.shapes.archimate.WorkPackageView = joint.shapes.basic.GenericView;

//Deliverable

joint.shapes.archimate.Deliverable = joint.shapes.archimate.WorkPackage.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<polygon class="name-rect" fill="url(#background) #FEE0E2" id="bg_frame" stroke="#000000" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="0,60 0.000002578971816546982,59 0.0000025352605916850735,58 0.0000024915491394494893,57 0.000002447837687213905,56 0.0000024041264623519965,55 0.0000023604150101164123,54 0.000002316703557880828,53 0.000002272992105645244,52 0.0000022292808807833353,51 0.000002185569428547751,50 0.000002141857976312167,49 0.000002098146524076583,48 0.000002054435299214674,47 0.00000201072384697909,46 0.000001967012394743506,45 0.000001923301169881597,44 0.000001879589717646013,43 0.0000018358782654104289,42 0.0000017921669268616824,41 0.000001748455588312936,40 0.0000017047441360773519,39 0.0000016610327975286054,38 0.0000016173213452930213,37 0.0000015736100067442749,36 0.0000015298985545086907,35 0.0000014861872159599443,34 0.0000014424757637243601,33 0.0000013987644251756137,32 0.0000013550530866268673,31 0.0000013113416343912832,30 0.0000012676302958425367,29 0.0000012239188436069526,28 0.0000011802075050582062,27 0.000001136496052822622,26 0.0000010927847142738756,25 0.0000010490732620382914,24 0.000001005361923489545,23 9.616505849407986e-7,22 9.179391327052144e-7,21 8.74227794156468e-7,20 8.305163987643027e-7,19 7.868050033721374e-7,18 7.430936079799721e-7,17 6.993822125878069e-7,16 6.556708171956416e-7,15 6.119594218034763e-7,14 5.68248026411311e-7,13 5.245366310191457e-7,12 4.808252924703993e-7,11 4.37113897078234e-7,10 3.934025016860687e-7,9 3.4969110629390343e-7,8 3.0597971090173814e-7,7 2.6226831550957286e-7,6 2.18556948539117e-7,5 1.7484555314695172e-7,4 1.3113415775478643e-7,3 8.742277657347586e-8,2 4.371138828673793e-8,1 0,0 1,0 2,0 3,0 4,0 5,0 6,0 7,0 8,0 9,0 10,0 11,0 12,0 13,0 14,0 15,0 16,0 17,0 18,0 19,0 20,0 21,0 22,0 23,0 24,0 25,0 26,0 27,0 28,0 29,0 30,0 31,0 32,0 33,0 34,0 35,0 36,0 37,0 38,0 39,0 40,0 41,0 42,0 43,0 44,0 45,0 46,0 47,0 48,0 49,0 50,0 51,0 52,0 53,0 54,0 55,0 56,0 57,0 58,0 59,0 60,0 61,0 62,0 63,0 64,0 65,0 66,0 67,0 68,0 69,0 70,0 71,0 72,0 73,0 74,0 75,0 76,0 77,0 78,0 79,0 80,0 81,0 82,0 83,0 84,0 85,0 86,0 87,0 88,0 89,0 90,0 91,0 92,0 93,0 94,0 95,0 96,0 97,0 98,0 99,0 100,0 100,1.0000076293945312 100,2.0000076293945312 100,3.0000076293945312 100,4.000007629394531 100,5.000007629394531 100,6.000007629394531 100,7.000007629394531 100,8.000007629394531 100,9.000007629394531 100,10.000007629394531 100,11.000007629394531 100,12.000007629394531 100,13.000007629394531 100,14.000007629394531 100,15.000007629394531 100,16.00000762939453 100,17.00000762939453 100,18.00000762939453 100,19.00000762939453 100,20.00000762939453 100,21.00000762939453 100,22.00000762939453 100,23.00000762939453 100,24.00000762939453 100,25.00000762939453 100,26.00000762939453 100,27.00000762939453 100,28.00000762939453 100,29.00000762939453 100,30.00000762939453 100,31.00000762939453 100,32.00000762939453 100,33.00000762939453 100,34.00000762939453 100,35.00000762939453 100,36.00000762939453 100,37.00000762939453 100,38.00000762939453 100,39.00000762939453 100,40.00000762939453 100,41.00000762939453 100,42.00000762939453 100,43.00000762939453 100,44.00000762939453 100,45.00000762939453 100,46.00000762939453 100,47.00000762939453 100,48.00000762939453 100,49.00000762939453 100,50.00000762939453 100,51.00000762939453 100,52.00000762939453 100,53.00000762939453 100,54.00000762939453 100,55.00000762939453 100,56.00000762939453 100,57.00000762939453 100,58.00000762939453 100,59.00000762939453 100,60.00000762939453 99.8522720336914,60.596466064453125 99.18194580078125,59.85456466674805 98.48384857177734,59.1386604309082 97.7640151977539,58.44459915161133 97.02507019042969,57.77093505859375 96.26893615722656,57.1165771484375 95.49569702148438,56.48249816894531 94.70633697509766,55.86862564086914 93.90153503417969,55.275142669677734 93.08161926269531,54.702728271484375 92.2472152709961,54.151634216308594 91.39895629882812,53.62215805053711 90.53677368164062,53.11561584472656 89.66153717041016,52.632049560546875 88.77327728271484,52.172786712646484 87.87300872802734,51.737552642822266 86.9605484008789,51.32851791381836 86.03690338134766,50.94540786743164 85.10270690917969,50.58881378173828 84.15853881835938,50.2595329284668 83.20481872558594,49.9589958190918 82.24248504638672,49.68734359741211 81.27239227294922,49.44493865966797 80.29534149169922,49.23230743408203 79.31218719482422,49.049896240234375 78.3239517211914,48.897300720214844 77.33135986328125,48.776329040527344 76.33545684814453,48.686363220214844 75.33724975585938,48.627403259277344 74.33769989013672,48.59931564331055 73.3377456665039,48.60237121582031 72.3383560180664,48.63603973388672 71.34043884277344,48.69968795776367 70.34490966796875,48.793704986572266 69.35253143310547,48.91665267944336 68.36420440673828,49.06874084472656 67.380615234375,49.248870849609375 66.40240478515625,49.456241607666016 65.43023681640625,49.69046401977539 64.46476745605469,49.95075607299805 63.506370544433594,50.236087799072266 62.5555305480957,50.54566192626953 61.612640380859375,50.87863540649414 60.67799377441406,51.234169006347656 59.75190734863281,51.611366271972656 58.83456039428711,52.00942611694336 57.92637252807617,52.42788314819336 57.027198791503906,52.86545944213867 56.137149810791016,53.32122802734375 55.256492614746094,53.79496765136719 54.385135650634766,54.28557586669922 53.523040771484375,54.792232513427734 52.67035675048828,55.31465148925781 51.82685470581055,55.85173416137695 50.99257278442383,56.40303039550781 50.16754913330078,56.96808624267578 49.373313903808594,57.575286865234375 48.580780029296875,58.18506622314453 47.78174591064453,58.78631591796875 46.9760856628418,59.378692626953125 46.163490295410156,59.961483001708984 45.343727111816406,60.5341682434082 44.5169792175293,61.0966911315918 43.68315124511719,61.648658752441406 42.8421630859375,62.18967056274414 41.99396514892578,62.71928787231445 41.13850402832031,63.23714828491211 40.2748908996582,63.741275787353516 39.40383529663086,64.232421875 38.5247802734375,64.70909881591797 37.6380729675293,65.17138671875 36.74337387084961,65.61802673339844 35.840736389160156,66.04837036132812 34.93022537231445,66.46183013916016 34.0118408203125,66.85742950439453 33.0855827331543,67.23426055908203 32.151546478271484,67.59131622314453 31.209815979003906,67.92762756347656 30.260604858398438,68.24217224121094 29.30414581298828,68.53398132324219 28.340791702270508,68.80203247070312 27.37082290649414,69.04512786865234 26.394617080688477,69.26176452636719 25.412799835205078,69.45144653320312 24.425865173339844,69.61219024658203 23.434558868408203,69.743408203125 22.439664840698242,69.84381866455078 21.442041397094727,69.91219329833984 20.442712783813477,69.94732666015625 19.44277572631836,69.94818878173828 18.443424224853516,69.91387939453125 17.445945739746094,69.84364318847656 16.451745986938477,69.73681640625 15.462332725524902,69.59226989746094 14.479294776916504,69.40943908691406 13.503806114196777,69.1898193359375 12.538148880004883,68.93034362792969 11.583148002624512,68.63397216796875 10.641331672668457,68.2981948852539 9.71352481842041,67.92540740966797 8.801560401916504,67.51533508300781 7.907374382019043,67.06781768798828 7.032134056091309,66.58432006835938 6.177393913269043,66.0654296875 5.344698905944824,65.51187133789062 4.536118030548096,64.92363739013672 3.75290846824646,64.30203247070312 2.997610092163086,63.646793365478516 2.2727575302124023,62.958065032958984 1.5825567245483398,62.234622955322266 0.9342482686042786,61.473480224609375 0.3451862335205078,60.66588592529297"></polygon>',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Deliverable',
		 subType: 'Deliverable',
		 
	 }, joint.shapes.archimate.WorkPackage.prototype.defaults),

});
joint.shapes.archimate.DeliverableView = joint.shapes.basic.GenericView;

//Plateau

joint.shapes.archimate.Plateau = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<rect class="name-rect"/>',
	        	'<g id="border" style="stroke:#000000;stroke-width:1.2;stroke-opacity:1">',
		            '<path id="topborder" class="box_border_top" d="M0,0 L10,-10 L110,-10 L100,0z" fill="#E7FFE7" />',
		            '<path id="rightborder" class="box_border_right" d="M100,0 L110,-10 L110,90 L100,100 z" fill="#E7FFE7" />',
		        '</g>',
			'</g>',
			'<g class="object" id="plateau">',
        		'<path  d="m -17,11.5 c 2.722946,0 5.445892,0 8.168838,0 M -14,7.5 c 2.722946,0 5.445892,0 8.168838,0 M -11,3.5 c 2.722946,0 5.445892,0 8.168838,0" style="fill:none;stroke:#000000;stroke-width:3;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:0;stroke-opacity:1;stroke-dasharray:none"/>',
        	'</g>',
        	'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Plateau',
		 subType: 'Plateau',
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.PlateauView = joint.shapes.basic.GenericView;

//Gap

joint.shapes.archimate.Gap = joint.shapes.archimate.Node.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<polygon class="name-rect" fill="url(#background) #FEE0E2" id="bg_frame" stroke="#000000" stroke-width="1" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" points="0,60 0.000002578971816546982,59 0.0000025352605916850735,58 0.0000024915491394494893,57 0.000002447837687213905,56 0.0000024041264623519965,55 0.0000023604150101164123,54 0.000002316703557880828,53 0.000002272992105645244,52 0.0000022292808807833353,51 0.000002185569428547751,50 0.000002141857976312167,49 0.000002098146524076583,48 0.000002054435299214674,47 0.00000201072384697909,46 0.000001967012394743506,45 0.000001923301169881597,44 0.000001879589717646013,43 0.0000018358782654104289,42 0.0000017921669268616824,41 0.000001748455588312936,40 0.0000017047441360773519,39 0.0000016610327975286054,38 0.0000016173213452930213,37 0.0000015736100067442749,36 0.0000015298985545086907,35 0.0000014861872159599443,34 0.0000014424757637243601,33 0.0000013987644251756137,32 0.0000013550530866268673,31 0.0000013113416343912832,30 0.0000012676302958425367,29 0.0000012239188436069526,28 0.0000011802075050582062,27 0.000001136496052822622,26 0.0000010927847142738756,25 0.0000010490732620382914,24 0.000001005361923489545,23 9.616505849407986e-7,22 9.179391327052144e-7,21 8.74227794156468e-7,20 8.305163987643027e-7,19 7.868050033721374e-7,18 7.430936079799721e-7,17 6.993822125878069e-7,16 6.556708171956416e-7,15 6.119594218034763e-7,14 5.68248026411311e-7,13 5.245366310191457e-7,12 4.808252924703993e-7,11 4.37113897078234e-7,10 3.934025016860687e-7,9 3.4969110629390343e-7,8 3.0597971090173814e-7,7 2.6226831550957286e-7,6 2.18556948539117e-7,5 1.7484555314695172e-7,4 1.3113415775478643e-7,3 8.742277657347586e-8,2 4.371138828673793e-8,1 0,0 1,0 2,0 3,0 4,0 5,0 6,0 7,0 8,0 9,0 10,0 11,0 12,0 13,0 14,0 15,0 16,0 17,0 18,0 19,0 20,0 21,0 22,0 23,0 24,0 25,0 26,0 27,0 28,0 29,0 30,0 31,0 32,0 33,0 34,0 35,0 36,0 37,0 38,0 39,0 40,0 41,0 42,0 43,0 44,0 45,0 46,0 47,0 48,0 49,0 50,0 51,0 52,0 53,0 54,0 55,0 56,0 57,0 58,0 59,0 60,0 61,0 62,0 63,0 64,0 65,0 66,0 67,0 68,0 69,0 70,0 71,0 72,0 73,0 74,0 75,0 76,0 77,0 78,0 79,0 80,0 81,0 82,0 83,0 84,0 85,0 86,0 87,0 88,0 89,0 90,0 91,0 92,0 93,0 94,0 95,0 96,0 97,0 98,0 99,0 100,0 100,1.0000076293945312 100,2.0000076293945312 100,3.0000076293945312 100,4.000007629394531 100,5.000007629394531 100,6.000007629394531 100,7.000007629394531 100,8.000007629394531 100,9.000007629394531 100,10.000007629394531 100,11.000007629394531 100,12.000007629394531 100,13.000007629394531 100,14.000007629394531 100,15.000007629394531 100,16.00000762939453 100,17.00000762939453 100,18.00000762939453 100,19.00000762939453 100,20.00000762939453 100,21.00000762939453 100,22.00000762939453 100,23.00000762939453 100,24.00000762939453 100,25.00000762939453 100,26.00000762939453 100,27.00000762939453 100,28.00000762939453 100,29.00000762939453 100,30.00000762939453 100,31.00000762939453 100,32.00000762939453 100,33.00000762939453 100,34.00000762939453 100,35.00000762939453 100,36.00000762939453 100,37.00000762939453 100,38.00000762939453 100,39.00000762939453 100,40.00000762939453 100,41.00000762939453 100,42.00000762939453 100,43.00000762939453 100,44.00000762939453 100,45.00000762939453 100,46.00000762939453 100,47.00000762939453 100,48.00000762939453 100,49.00000762939453 100,50.00000762939453 100,51.00000762939453 100,52.00000762939453 100,53.00000762939453 100,54.00000762939453 100,55.00000762939453 100,56.00000762939453 100,57.00000762939453 100,58.00000762939453 100,59.00000762939453 100,60.00000762939453 99.8522720336914,60.596466064453125 99.18194580078125,59.85456466674805 98.48384857177734,59.1386604309082 97.7640151977539,58.44459915161133 97.02507019042969,57.77093505859375 96.26893615722656,57.1165771484375 95.49569702148438,56.48249816894531 94.70633697509766,55.86862564086914 93.90153503417969,55.275142669677734 93.08161926269531,54.702728271484375 92.2472152709961,54.151634216308594 91.39895629882812,53.62215805053711 90.53677368164062,53.11561584472656 89.66153717041016,52.632049560546875 88.77327728271484,52.172786712646484 87.87300872802734,51.737552642822266 86.9605484008789,51.32851791381836 86.03690338134766,50.94540786743164 85.10270690917969,50.58881378173828 84.15853881835938,50.2595329284668 83.20481872558594,49.9589958190918 82.24248504638672,49.68734359741211 81.27239227294922,49.44493865966797 80.29534149169922,49.23230743408203 79.31218719482422,49.049896240234375 78.3239517211914,48.897300720214844 77.33135986328125,48.776329040527344 76.33545684814453,48.686363220214844 75.33724975585938,48.627403259277344 74.33769989013672,48.59931564331055 73.3377456665039,48.60237121582031 72.3383560180664,48.63603973388672 71.34043884277344,48.69968795776367 70.34490966796875,48.793704986572266 69.35253143310547,48.91665267944336 68.36420440673828,49.06874084472656 67.380615234375,49.248870849609375 66.40240478515625,49.456241607666016 65.43023681640625,49.69046401977539 64.46476745605469,49.95075607299805 63.506370544433594,50.236087799072266 62.5555305480957,50.54566192626953 61.612640380859375,50.87863540649414 60.67799377441406,51.234169006347656 59.75190734863281,51.611366271972656 58.83456039428711,52.00942611694336 57.92637252807617,52.42788314819336 57.027198791503906,52.86545944213867 56.137149810791016,53.32122802734375 55.256492614746094,53.79496765136719 54.385135650634766,54.28557586669922 53.523040771484375,54.792232513427734 52.67035675048828,55.31465148925781 51.82685470581055,55.85173416137695 50.99257278442383,56.40303039550781 50.16754913330078,56.96808624267578 49.373313903808594,57.575286865234375 48.580780029296875,58.18506622314453 47.78174591064453,58.78631591796875 46.9760856628418,59.378692626953125 46.163490295410156,59.961483001708984 45.343727111816406,60.5341682434082 44.5169792175293,61.0966911315918 43.68315124511719,61.648658752441406 42.8421630859375,62.18967056274414 41.99396514892578,62.71928787231445 41.13850402832031,63.23714828491211 40.2748908996582,63.741275787353516 39.40383529663086,64.232421875 38.5247802734375,64.70909881591797 37.6380729675293,65.17138671875 36.74337387084961,65.61802673339844 35.840736389160156,66.04837036132812 34.93022537231445,66.46183013916016 34.0118408203125,66.85742950439453 33.0855827331543,67.23426055908203 32.151546478271484,67.59131622314453 31.209815979003906,67.92762756347656 30.260604858398438,68.24217224121094 29.30414581298828,68.53398132324219 28.340791702270508,68.80203247070312 27.37082290649414,69.04512786865234 26.394617080688477,69.26176452636719 25.412799835205078,69.45144653320312 24.425865173339844,69.61219024658203 23.434558868408203,69.743408203125 22.439664840698242,69.84381866455078 21.442041397094727,69.91219329833984 20.442712783813477,69.94732666015625 19.44277572631836,69.94818878173828 18.443424224853516,69.91387939453125 17.445945739746094,69.84364318847656 16.451745986938477,69.73681640625 15.462332725524902,69.59226989746094 14.479294776916504,69.40943908691406 13.503806114196777,69.1898193359375 12.538148880004883,68.93034362792969 11.583148002624512,68.63397216796875 10.641331672668457,68.2981948852539 9.71352481842041,67.92540740966797 8.801560401916504,67.51533508300781 7.907374382019043,67.06781768798828 7.032134056091309,66.58432006835938 6.177393913269043,66.0654296875 5.344698905944824,65.51187133789062 4.536118030548096,64.92363739013672 3.75290846824646,64.30203247070312 2.997610092163086,63.646793365478516 2.2727575302124023,62.958065032958984 1.5825567245483398,62.234622955322266 0.9342482686042786,61.473480224609375 0.3451862335205078,60.66588592529297"></polygon>',
			'</g>',
			'<g class="object" id="gap">',
	            '<circle id="c" cx="-8" cy="7" r="6" />',
	            '<path d="M-15 5 l14 0 M-15 9 l14 0" />',
	        '</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Gap',
		 subType: 'Gap',
		 
	 }, joint.shapes.archimate.Node.prototype.defaults),

});
joint.shapes.archimate.GapView = joint.shapes.basic.GenericView;

//Group

joint.shapes.archimate.Group = joint.shapes.basic.Generic.extend({
	
	markup: [
		'<g class="rotatable">',
			'<g class="scalable">',
				'<path class="name-rect" d="M 0 0 50 0 50 15 100 15 100 100 0 100 z"/>',//0 15 50 15 50 0 "/>',
				'<path style="stroke:#000000;stroke-width:1;stroke-dasharray:5.5" d="M 0 15 50 15" />',
			'</g>',
			'<text class="name-text"/>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Group',
		 subType: 'Group',

	        attrs: {
	        	rect: {
	        		rx: 2,
	        		ry: 2,
	                width: 100,
	                height: 100
	            },
	            '.name-rect': { 
	            	'stroke': '#000000', 
	            	'stroke-width': 1, 
	            	'stroke-dasharray': '5,5',
	            	'fill': '#FFFFFF' 
	            },
	            '.name-text': {
	                'ref': '.name-rect', 
	                'ref-y': .075, 
	                'ref-x': .25, 
	                'text-anchor': 'middle', 
	                'y-alignment': 'middle', 
	                'font-weight': 'normal',
	                'fill': '#000000', 
	                'font-size': 12, 
	                'font-family': 'Arial'
	            },
	            '.object': {
	            	'ref': '.name-rect', 
	            	'ref-y': 1, 
	            	'ref-x': 0.999, 
	            	'text-anchor': 'end',
	            	'fill':'none', 
	            	'stroke':'#000000', 
	            	'stroke-width': 1.2, 
	            	'stroke-opacity': 1
	            }
	            
	        },
	        
		 
	 }, joint.shapes.basic.Generic.prototype.defaults),
	
	 initialize: function() {

        this.on('change:name', function() {
            this.updateRectangles();
            this.trigger('update');
        }, this);

        this.updateRectangles();

	 	joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
    },

    getClassName: function() {
        return this.get('name');
    },

    updateRectangles: function() {

        var attrs = this.get('attrs');

        var rects = [
            { type: 'name', text: this.getClassName() }
        ];

        var offsetY = 0;

        _.each(rects, function(rect) {

            var lines = _.isArray(rect.text) ? rect.text : [rect.text];
            var rectHeight = lines.length * 20 + 20;

            attrs['.' + rect.type + '-text'].text = lines.join('\n');
            //attrs['.' + rect.type + '-rect'].height = rectHeight;
            attrs['.' + rect.type + '-rect'].transform = 'translate(0,'+ offsetY + ')';

            offsetY += rectHeight;
        });
    }

});
joint.shapes.archimate.GroupView = joint.shapes.basic.GenericView;

/** RELATIONSHIPS */

//Junction

joint.shapes.archimate.Junction = joint.shapes.basic.Generic.extend({
	
	markup: [
		'<g class="rotatable">',
        	'<g class="scalable">',
	        	'<circle class="name-rect" cx="10" cy="10" r="10"/>',	        		
			'</g>',
		'</g>'
	].join(''),
	
	 defaults: joint.util.deepSupplement({
		 
		 type: 'archimate.Junction',
		 subType: 'Junction',

	        attrs: {
	        	rect: {
	        		rx: 2,
	        		ry: 2,
	                width: 100,
	                height: 100
	            },
	            '.name-rect': { 
	            	'stroke': '#000000', 
	            	'stroke-width': 0, 
	            	'fill': '#000000' 
	            },
	            '.name-text': {
	                'ref': '.name-rect', 
	                'ref-y': .5, 
	                'ref-x': .5, 
	                'text-anchor': 
	                'middle', 
	                'y-alignment': 'middle', 
	                'font-weight': 'normal',
	                'fill': '#000000', 
	                'font-size': 12, 
	                'font-family': 'Arial'
	            },
	            '.object': {
	            	'ref': '.name-rect', 
	            	'ref-y': 1, 
	            	'ref-x': 0.999, 
	            	'text-anchor': 'end',
	            	'fill':'none', 
	            	'stroke':'#000000', 
	            	'stroke-width': 1.2, 
	            	'stroke-opacity': 1
	            }
	            
	        },
	        
		 
	 }, joint.shapes.basic.Generic.prototype.defaults),
	
	 initialize: function() {
		 joint.shapes.basic.Generic.prototype.initialize.apply(this, arguments);
	 },


});

//Relations
joint.shapes.archimate.Relationships = joint.dia.Link.extend({
	
    defaults: {

        type: "archimate.Relationships",

        attrs: {

            '.marker-source': {
                d: 'M 0 0'
            },
            '.marker-target': {
                d: 'M 0 0',
            },
            '.connection': {
                'stroke-dasharray': ' ',
                'stroke-width': 1
            },
            '.connection-wrap': {
                style: '',
                onMouseOver: '',
                onMouseOut: ''
            },
 
        },

        label: [],
        flowType: "association"
    },

    initialize: function() {

        joint.dia.Link.prototype.initialize.apply(this, arguments);

        this.listenTo(this, 'change:flowType', this.onFlowTypeChange);
        
        this.on('change:label', function() {
            this.updateLabel();
        }, this);
        
        this.onFlowTypeChange(this, this.get('flowType'));
    },
    
    getLabel: function() {
        return this.get('label');
    },
    
    updateLabel: function() {
    	
    	this.label(0, {
            position: .5,
            attrs: {
                rect: { fill: '#FFFFFF' },
                text: { fill: '#000000', 'font-size': 11, text: this.getLabel() }
            }
        });
    	
    },
    
    onFlowTypeChange: function(cell, type) {

        var attrs;

        switch (type) {

        case 'association':

        	attrs = {};

            break;
        
        case 'access':

            attrs = {
        		'.marker-target': {
        			d: 'M 10 0 L 0 5 L 10 10',
                    fill: 'none'                  	
                },
                '.connection': {
                	'stroke-dasharray': '4,4'
                }
            };

            break;  
            
        case 'aggregation':

            attrs = {
        		'.marker-source': {
                    d: 'M 20 8 L 10 0 L 0 8 L 10 16 z',
                    fill: '#FFFFFF'
                }
            };

            break; 
            
        case 'assignment':

            attrs = {
        		'.marker-source': {
                    d: 'M 5, 5 m -2.5, 0 a 2.5,2.5 0 1,0 5,0 a 2.5,2.5 0 1,0 -5,0',
                    fill: '#000000'
                },
	            '.marker-target': {
	            	d: 'M 5, 5 m -2.5, 0 a 2.5,2.5 0 1,0 5,0 a 2.5,2.5 0 1,0 -5,0',
	                fill: '#000000'
	            }
            };

            break; 
            
        case 'composition':

            attrs = {
        		'.marker-source': {
                    d: 'M 20 8 L 10 0 L 0 8 L 10 16 z',
                    fill: '#000000'
                }
            };

            break;  
            
        case 'flow':

            attrs = {
        		'.marker-target': {
                    d: 'M 10 0 L 0 5 L 10 10 z',
                    fill: '#000000'
                },
                '.connection': {
                	'stroke-dasharray': '4,4'
                }
            };

            break;  
            
        case 'influence':

            attrs = {
        		'.marker-target': {
                    d: 'M 10 0 L 0 5 L 10 10 z',
                    fill: '#000000'
                },
                '.connection': {
                	'stroke-dasharray': '4,4'
                }
            };

            break;  
            
        case 'realisation':

            attrs = {
        		'.marker-target': {
        			d: 'M 20 0 L 0 10 L 20 20 z',
                    fill: '#FFFFFF'                  	
                },
                '.connection': {
                	'stroke-dasharray': '4,4'
                }
            };

            break; 
            
        case 'specialisation':

            attrs = {
        		'.marker-target': {
        			d: 'M 20 0 L 0 10 L 20 20 z',
                    fill: '#FFFFFF'                  	
                },
            };

            break; 
            
        case 'triggering':

            attrs = {
        		'.marker-target': {
        			d: 'M 10 0 L 0 5 L 10 10 z',
                    fill: '#000000'                  	
                },
            };

            break; 
               
        case 'usedBy':

            attrs = {
        		'.marker-target': {
        			d: 'M 10 0 L 0 5 L 10 10',
                    fill: 'none'                  	
                },
            };

            break;  
      
        default:

            throw "ArchiMate: Unknown Connector Type: " + type;
        }

        cell.attr(_.merge({}, this.defaults.attrs, attrs));
    }

});
joint.shapes.archimate.RelationshipsView = joint.dia.LinkView;

if (typeof exports === 'object') {

    module.exports = joint.shapes.archimate;
}

